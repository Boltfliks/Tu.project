package bg.tu_varna.sit.a2.f22621613.grammar.algorithms;

import bg.tu_varna.sit.a2.f22621613.grammar.contextFreeGrammar.ContextFreeGrammar;
import bg.tu_varna.sit.a2.f22621613.grammar.contextFreeGrammar.Rule;

import java.util.*;
/**
 * This class implements the CYK (Cocke-Younger-Kasami) algorithm for parsing strings
 * based on a given context-free grammar in Chomsky Normal Form (CNF).
 */
public class CYKAlgorithm {
    private static final char START_SYMBOL = 'S';
    private ContextFreeGrammar grammar;

    /**
     * Constructs a CYKAlgorithm instance with the specified context-free grammar.
     *
     * @param grammar The context-free grammar to be used for parsing.
     */
    public CYKAlgorithm(ContextFreeGrammar grammar) {
        this.grammar = grammar;
    }

    /**
     * Parses the input string to determine if it can be generated by the grammar.
     *
     * @param input The input string to be parsed.
     * @return True if the input string can be generated by the grammar, false otherwise.
     */
    public boolean parse(String input) {
        ChomskyGrammar grammar1 = new ChomskyGrammar(grammar);
        if(!grammar1.chomsky()) {
            System.out.println("The grammar is not in CNF");
            return false;
        }
        int n = input.length();
        Set<Character>[][] table = new HashSet[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                table[i][j] = new HashSet<>();
                if (i == j) {
                    table[i][j].add(START_SYMBOL);
                }
            }
        }

        for (int i = 1; i < n; i++) {
            char symbol = input.charAt(i);
            for (Rule rule : grammar.getRules()) {
                String left = rule.getLeft();
                String right = rule.getRight();
                if (right.length() == 1 && right.charAt(0) == symbol) {
                    table[i][i].add(left.charAt(0));
                    break;
                }
            }
        }

        for (int len = 2; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                for (int k = i; k < j; k++) {
                    for (Rule rule : grammar.getRules()) {
                        String left = rule.getLeft();
                        String right = rule.getRight();
                        for (char rightChar : right.toCharArray()) {
                            if (table[i][k].contains(left.charAt(0)) && table[k + 1][j].contains(rightChar)) {
                                table[i][j].add(left.charAt(0));
                            }
                        }
                    }
                }
            }
        }

        return table[0][n - 1].contains(START_SYMBOL);
    }

}

